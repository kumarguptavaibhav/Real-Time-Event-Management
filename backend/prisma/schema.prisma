// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// model User {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   name      String
//   email     String   @unique
//   password  String
//   createdAt DateTime @default(now())

//   attendees Attendee[]
// }

// model Event {
//   id                      String     @id @default(auto()) @map("_id") @db.ObjectId
//   start_date              DateTime
//   end_date                DateTime
//   event_name              String
//   event_description       String
//   event_level             String
//   event_type              String
//   event_organizers        String
//   organization_name       String
//   external_organizers     String
//   speaker_type            String
//   speaker_name            String
//   chief_guest_name        String
//   chief_guest_designation String
//   created_by              String?
//   updated_by              String?
//   is_cancelled            Boolean    @default(false)
//   createdAt               DateTime   @default(now())
//   updatedAt               DateTime   @updatedAt
//   Attendee                Attendee[]
// }

// model Attendee {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   eventId   String   @db.ObjectId
//   userId    String   @db.ObjectId
//   createdAt DateTime @default(now())

//   event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
//   User  User  @relation(fields: [userId], references: [id])
// }
model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String     @unique
  password  String
  createdAt DateTime   @default(now())
  attendees Attendee[]
  events    Event[]    @relation("EventCreatedBy")
}

model Event {
  id                      String     @id @default(auto()) @map("_id") @db.ObjectId
  start_date              DateTime
  end_date                DateTime
  event_name              String
  event_description       String
  event_level             String
  event_type              String
  event_organizers        String
  organization_name       String
  external_organizers     String
  speaker_type            String
  speaker_name            String
  chief_guest_name        String
  chief_guest_designation String
  created_by              String     @db.ObjectId
  updated_by              String?    @db.ObjectId
  is_cancelled            Boolean    @default(false)
  createdAt               DateTime   @default(now())
  updatedAt               DateTime?  @updatedAt
  attendees               Attendee[]
  creator                 User       @relation("EventCreatedBy", fields: [created_by], references: [id])
}

model Attendee {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  eventId   String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, eventId])
}
